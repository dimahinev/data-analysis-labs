import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
@st.cache_data
def load_data():
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    df = pd.read_excel("Wine Words.xlsx")
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df['price'] = pd.to_numeric(df['price'], errors='coerce')  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ price –≤ —á–∏—Å–ª–æ
    df['points'] = pd.to_numeric(df['points'], errors='coerce')  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ points –≤ —á–∏—Å–ª–æ
    
    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –º–µ–¥–∏–∞–Ω–æ–π
    df['price'].fillna(df['price'].median(), inplace=True)
    df['points'].fillna(df['points'].median(), inplace=True)
    
    # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ
    df['price_quality_ratio'] = df['points'] / df['price'].replace(0, 1)
    
    # –û—á–∏—Å—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
    df['cleaned_description'] = df['description'].fillna("").str.lower()
    
    return df

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = load_data()

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üìä –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–Ω–∞—Ö")

# **–§–∏–ª—å—Ç—Ä—ã** –Ω–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
st.sidebar.header("üîç –§–∏–ª—å—Ç—Ä—ã")
min_price, max_price = st.sidebar.slider("–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã (USD)", 0, int(df['price'].max()), (0, 100))
min_points, max_points = st.sidebar.slider("–î–∏–∞–ø–∞–∑–æ–Ω –±–∞–ª–ª–æ–≤ (Points)", 50, 100, (80, 95))
selected_category = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", df['category'].dropna().unique(), default=df['category'].dropna().unique())
min_quality = st.sidebar.slider("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ", 0.0, 10.0, 1.0)

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
filtered_df = df[
    (df['price'] >= min_price) & 
    (df['price'] <= max_price) &
    (df['points'] >= min_points) & 
    (df['points'] <= max_points) &
    (df['category'].isin(selected_category)) &
    (df['price_quality_ratio'] >= min_quality)
]

# **–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö**
st.subheader("üìã –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
st.dataframe(filtered_df.head(1000))  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 1000 —Å—Ç—Ä–æ–∫

# **–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è 1: –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –±–∞–ª–ª–æ–≤**
st.subheader("1Ô∏è‚É£ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –≤–∏–Ω")
fig, ax = plt.subplots()
sns.histplot(filtered_df['points'], bins=20, kde=True, color='purple', ax=ax)
plt.xlabel("Points")
st.pyplot(fig)

# **–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è 2: –°—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ —Å—Ç—Ä–∞–Ω–∞–º**
st.subheader("2Ô∏è‚É£ –°—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ –≤–∏–Ω–æ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º")
avg_price = filtered_df.groupby('country')['price'].mean().sort_values(ascending=False).head(10)
fig, ax = plt.subplots()
avg_price.plot(kind='bar', color='orange', ax=ax)
plt.title("–°—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ –≤–∏–Ω–æ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º")
plt.ylabel("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ (USD)")
plt.xticks(rotation=45)
st.pyplot(fig)

# **–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è 3: Stacked Bar Chart (–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ä–µ–≥–∏–æ–Ω—ã)**
st.subheader("3Ô∏è‚É£ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∏–Ω –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ —Ä–µ–≥–∏–æ–Ω–∞–º")
stacked_data = filtered_df.groupby(['province', 'category']).size().unstack(fill_value=0).head(10)
fig, ax = plt.subplots()
stacked_data.plot(kind='bar', stacked=True, colormap='viridis', ax=ax)
plt.title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∏–Ω –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ —Ä–µ–≥–∏–æ–Ω–∞–º")
plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–Ω")
plt.xticks(rotation=45)
st.pyplot(fig)

# **–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è 4: Scatter Plot –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π**
st.subheader("4Ô∏è‚É£ Scatter Plot: –¶–µ–Ω–∞ vs –ë–∞–ª–ª—ã")
fig = px.scatter(
    filtered_df, x='price', y='points', color='category',
    title="Scatter Plot: –¶–µ–Ω–∞ vs –ë–∞–ª–ª—ã",
    hover_data=['country', 'variety', 'winery']
)
st.plotly_chart(fig)

# **–ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –≤–∏–Ω**
st.subheader("üîé –ü–æ–∏—Å–∫ –≤–∏–Ω –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é")
search_term = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö:")
if search_term:
    search_results = df[df['cleaned_description'].str.contains(search_term.lower(), na=False)]
    st.write(f"–ù–∞–π–¥–µ–Ω–æ {len(search_results)} –≤–∏–Ω —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º '{search_term}':")
    st.dataframe(search_results)
